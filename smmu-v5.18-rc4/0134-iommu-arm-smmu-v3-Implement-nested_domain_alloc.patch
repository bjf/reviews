From 05068fe3b378dbf7bf4835378543a1db749e5958 Mon Sep 17 00:00:00 2001
From: Eric Auger <eric.auger@redhat.com>
Date: Mon, 2 Nov 2020 14:25:31 +0100
Subject: [PATCH 134/141] iommu/arm-smmu-v3: Implement nested_domain_alloc

The nested_domain_alloc callback function receives from a guest all
essential stage-1 configurations for nesting. This will allow the
2-stage STE to be accordingly done in arm_smmu_write_strtab_ent().

Change-Id: Iafc40ba4e2c2edaab8db339e9ce5e5d3b3735661
Signed-off-by: Eric Auger <eric.auger@redhat.com>
Signed-off-by: Nicolin Chen <nicolinc@nvidia.com>

71	0	drivers/iommu/arm/arm-smmu-v3/arm-smmu-v3.c
1	0	drivers/iommu/arm/arm-smmu-v3/arm-smmu-v3.h

diff --git a/drivers/iommu/arm/arm-smmu-v3/arm-smmu-v3.c b/drivers/iommu/arm/arm-smmu-v3/arm-smmu-v3.c
index 603b786dadda..74dc1c1977fb 100644
--- a/drivers/iommu/arm/arm-smmu-v3/arm-smmu-v3.c
+++ b/drivers/iommu/arm/arm-smmu-v3/arm-smmu-v3.c
@@ -1010,6 +1010,10 @@ static void arm_smmu_write_cd_l1_desc(__le64 *dst,
 	WRITE_ONCE(*dst, cpu_to_le64(val));
 }
 
+/*
+ * Must not be used in case of nested mode where the CD table is owned
+ * by the guest
+ */
 static __le64 *arm_smmu_get_cd_ptr(struct arm_smmu_domain *smmu_domain,
 				   u32 ssid)
 {
@@ -2043,6 +2047,7 @@ static struct iommu_domain *arm_smmu_domain_alloc(unsigned type)
 	if (type != IOMMU_DOMAIN_UNMANAGED &&
 	    type != IOMMU_DOMAIN_DMA &&
 	    type != IOMMU_DOMAIN_DMA_FQ &&
+	    type != IOMMU_DOMAIN_NESTING &&
 	    type != IOMMU_DOMAIN_IDENTITY)
 		return NULL;
 
@@ -2219,6 +2224,12 @@ static int arm_smmu_domain_finalise(struct iommu_domain *domain,
 		return -EINVAL;
 	}
 
+	if (domain->type == IOMMU_DOMAIN_NESTING && !smmu_domain->s2) {
+		dev_err(smmu_domain->smmu->dev,
+			"does not have stage-2 domain\n");
+		return -EINVAL;
+	}
+
 	if (domain->type == IOMMU_DOMAIN_NESTING) {
 		/*
 		 * A nested domain is a virtual object for a 2-stage setup:
@@ -2825,6 +2836,65 @@ static void arm_smmu_get_resv_regions(struct device *dev,
 	iommu_dma_get_resv_regions(dev, head);
 }
 
+struct iommu_domain *arm_smmu_nested_domain_alloc(struct iommu_domain *s2_domain,
+						  unsigned long s1_pgtbl,
+						  union iommu_stage1_config *cfg)
+{
+	struct iommu_stage1_config_smmu *config_smmu = &cfg->smmu;
+	struct arm_smmu_domain *s2 = to_smmu_domain(s2_domain);
+	struct arm_smmu_domain *smmu_domain;
+	struct iommu_domain *domain;
+
+	mutex_lock(&s2->init_mutex);
+	if (s2->stage != ARM_SMMU_DOMAIN_S2) {
+		mutex_unlock(&s2->init_mutex);
+		return NULL;
+	}
+	mutex_unlock(&s2->init_mutex);
+
+	if (config_smmu->format != IOMMU_SMMU_FORMAT_SMMUV3)
+		return NULL;
+
+	if (config_smmu->config != IOMMU_SMMU_CONFIG_ABORT &&
+	    config_smmu->config != IOMMU_SMMU_CONFIG_BYPASS &&
+	    config_smmu->config != IOMMU_SMMU_CONFIG_TRANSLATE)
+		return NULL;
+
+	domain = arm_smmu_domain_alloc(IOMMU_DOMAIN_NESTING);
+	if (!domain)
+		return NULL;
+	domain->ops = arm_smmu_ops.default_domain_ops;
+
+	smmu_domain = to_smmu_domain(domain);
+	mutex_lock(&smmu_domain->init_mutex);
+
+	smmu_domain->s2 = s2;
+
+	switch (config_smmu->config) {
+	case IOMMU_SMMU_CONFIG_ABORT:
+		smmu_domain->bypass = false;
+		smmu_domain->abort = true;
+		break;
+	case IOMMU_SMMU_CONFIG_BYPASS:
+		smmu_domain->bypass = true;
+		smmu_domain->abort = false;
+		break;
+	case IOMMU_SMMU_CONFIG_TRANSLATE:
+		smmu_domain->s1_cfg.cdcfg.cdtab_dma = s1_pgtbl;
+		smmu_domain->s1_cfg.s1cdmax = config_smmu->s1cdmax;
+		smmu_domain->s1_cfg.s1fmt = config_smmu->s1fmt;
+		smmu_domain->bypass = false;
+		smmu_domain->abort = false;
+		break;
+	default:
+		break;
+	}
+
+	mutex_unlock(&smmu_domain->init_mutex);
+
+	return domain;
+}
+
 static bool arm_smmu_dev_has_feature(struct device *dev,
 				     enum iommu_dev_features feat)
 {
@@ -2907,6 +2977,7 @@ static int arm_smmu_dev_disable_feature(struct device *dev,
 static struct iommu_ops arm_smmu_ops = {
 	.capable		= arm_smmu_capable,
 	.domain_alloc		= arm_smmu_domain_alloc,
+	.nested_domain_alloc	= arm_smmu_nested_domain_alloc,
 	.probe_device		= arm_smmu_probe_device,
 	.release_device		= arm_smmu_release_device,
 	.device_group		= arm_smmu_device_group,
diff --git a/drivers/iommu/arm/arm-smmu-v3/arm-smmu-v3.h b/drivers/iommu/arm/arm-smmu-v3/arm-smmu-v3.h
index 3edddc361c56..0a2775bd1cf1 100644
--- a/drivers/iommu/arm/arm-smmu-v3/arm-smmu-v3.h
+++ b/drivers/iommu/arm/arm-smmu-v3/arm-smmu-v3.h
@@ -707,6 +707,7 @@ enum arm_smmu_domain_stage {
 };
 
 struct arm_smmu_domain {
+	struct arm_smmu_domain		*s2;
 	struct arm_smmu_device		*smmu;
 	struct mutex			init_mutex; /* Protects smmu pointer */
 
-- 
2.34.1

