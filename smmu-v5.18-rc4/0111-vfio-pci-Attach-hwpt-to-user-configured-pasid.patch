From df7cf1538b557671fbbc052ed3d2d3e57cabfaf0 Mon Sep 17 00:00:00 2001
From: Yi Liu <yi.l.liu@intel.com>
Date: Wed, 11 May 2022 06:55:58 -0700
Subject: [PATCH 111/141] vfio/pci: Attach hwpt to user configured pasid

This enables the vSVA support for passthrough pci devices running on Intel
VT-d platform.

Signed-off-by: Yi Liu <yi.l.liu@intel.com>

22	1	drivers/vfio/pci/vfio_pci_core.c
16	2	drivers/vfio/vfio.c
1	0	include/linux/vfio_pci_core.h
4	1	include/uapi/linux/vfio.h

diff --git a/drivers/vfio/pci/vfio_pci_core.c b/drivers/vfio/pci/vfio_pci_core.c
index 5cb04c4a56a5..4702463d1a3f 100644
--- a/drivers/vfio/pci/vfio_pci_core.c
+++ b/drivers/vfio/pci/vfio_pci_core.c
@@ -307,6 +307,13 @@ int vfio_pci_core_enable(struct vfio_pci_core_device *vdev)
 		return ret;
 	}
 
+	ret = iommu_dev_enable_feature(&pdev->dev, IOMMU_DEV_FEAT_SVA);
+	if (ret) {
+		dev_warn(&pdev->dev, "Unable to turn on SVA feature.\n");
+	} else {
+		vdev->has_sva = true;
+	}
+
 	msix_pos = pdev->msix_cap;
 	if (msix_pos) {
 		u16 flags;
@@ -375,6 +382,9 @@ void vfio_pci_core_disable(struct vfio_pci_core_device *vdev)
 	kfree(vdev->region);
 	vdev->region = NULL; /* don't krealloc a freed pointer */
 
+	if (vdev->has_sva)
+		iommu_dev_disable_feature(&pdev->dev, IOMMU_DEV_FEAT_SVA);
+
 	vfio_config_free(vdev);
 
 	for (i = 0; i < PCI_STD_NUM_BARS; i++) {
@@ -807,10 +817,21 @@ int vfio_pci_core_attach_hwpt(struct vfio_device *core_vdev,
 		goto out_unlock;
 	}
 
-	ret = iommufd_device_attach(vdev->idev, &pt_id, 0);
+	/* TODO: the invalid pasid info needs be defined in uAPI,
+	 * otherwise userspae has no idea about which pasid is valid and
+	 * which is not. */
+	if (attach->flags & VFIO_DEVICE_ATTACH_PASID) {
+		if (attach->pasid == INVALID_IOASID)
+			ret = -EINVAL;
+		else
+			ret = iommufd_device_attach_pasid(vdev->idev, &pt_id,
+							  attach->pasid, 0); //TODO: needs to hold pasid reference
+	} else
+		ret = iommufd_device_attach(vdev->idev, &pt_id, 0);
 	if (ret)
 		goto out_free;
 
+	WARN_ON(attach->hwpt_id != pt_id);
 
 	hwpt->hwpt_id = pt_id;
 	hwpt->stage1 = true;
diff --git a/drivers/vfio/vfio.c b/drivers/vfio/vfio.c
index bf716166f7c1..788b83aebf02 100644
--- a/drivers/vfio/vfio.c
+++ b/drivers/vfio/vfio.c
@@ -1886,16 +1886,30 @@ static long vfio_device_attach_hwpt(struct vfio_device *device,
 				    unsigned long arg)
 {
 	struct vfio_device_attach_hwpt attach;
-	unsigned long minsz;
+	unsigned long minsz, cursz;
 
 	minsz = offsetofend(struct vfio_device_attach_hwpt, hwpt_id);
+	cursz = offsetofend(struct vfio_device_attach_hwpt, pasid);
+
+	memset((void *)&attach, 0, sizeof(attach));
+
 	if (copy_from_user(&attach, (void __user *)arg, minsz))
 		return -EFAULT;
 
-	if (attach.argsz < minsz || attach.flags ||
+	if (attach.argsz < minsz ||
+	    attach.flags & ~VFIO_DEVICE_ATTACH_PASID ||
 	    attach.iommufd < 0 || attach.hwpt_id == IOMMUFD_INVALID_ID)
 		return -EINVAL;
 
+	if (attach.argsz < cursz &&
+	    attach.flags & VFIO_DEVICE_ATTACH_PASID)
+		return -EINVAL;
+
+	if (attach.argsz >= cursz &&
+	    copy_from_user((void *)&attach + minsz,
+			   (void __user *)arg + minsz, cursz - minsz))
+		return -EFAULT;
+
 	/* not allowed if the device is opened in legacy interface */
 	if (vfio_device_in_container(device))
 		return -EBUSY;
diff --git a/include/linux/vfio_pci_core.h b/include/linux/vfio_pci_core.h
index 65167aecb7f0..2126971b6ba6 100644
--- a/include/linux/vfio_pci_core.h
+++ b/include/linux/vfio_pci_core.h
@@ -132,6 +132,7 @@ struct vfio_pci_core_device {
 	bool			needs_reset;
 	bool			nointx;
 	bool			needs_pm_restore;
+	bool			has_sva;
 	struct pci_saved_state	*pci_saved_state;
 	struct pci_saved_state	*pm_save;
 	int			ioeventfds_nr;
diff --git a/include/uapi/linux/vfio.h b/include/uapi/linux/vfio.h
index 5e6e7249c775..1b1fde430086 100644
--- a/include/uapi/linux/vfio.h
+++ b/include/uapi/linux/vfio.h
@@ -285,17 +285,20 @@ struct vfio_device_detach_hwpt {
  * Undo by VFIO_DEVICE_DETACH_HWPT.
  *
  * @argsz:	user filled size of this data.
- * @flags:	must be 0.
+ * @flags:	optional flags.
  * @iommufd:	iommufd where the hwpt comes from.
  * @hwpt_id:	Input the target hwpt.
+ * @pasid:	Input target pasid. Should be a host pasid allocate by iommufd
  *
  * Return: 0 on success, -errno on failure.
  */
 struct vfio_device_attach_hwpt {
 	__u32	argsz;
 	__u32	flags;
+#define VFIO_DEVICE_ATTACH_PASID	(1 << 0) /* pasid field is avaiable */
 	__s32	iommufd;
 	__u32	hwpt_id;
+	__u32	pasid;
 };
 
 #define VFIO_DEVICE_ATTACH_HWPT	_IO(VFIO_TYPE, VFIO_BASE + 22)
-- 
2.34.1

