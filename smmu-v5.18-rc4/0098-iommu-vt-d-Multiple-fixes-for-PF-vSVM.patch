From 90ade6b79fcd45d947eeae998ddeedcc66231a99 Mon Sep 17 00:00:00 2001
From: Yi Liu <yi.l.liu@intel.com>
Date: Wed, 1 Jun 2022 07:33:02 -0700
Subject: [PATCH 098/141] iommu/vt-d: Multiple fixes for PF vSVM

Signed-off-by: Yi Liu <yi.l.liu@intel.com>

17	3	drivers/iommu/intel/nested.c
6	3	drivers/iommu/intel/pasid.c
5	1	drivers/iommu/iommu.c

diff --git a/drivers/iommu/intel/nested.c b/drivers/iommu/intel/nested.c
index 95d7d1863ed3..71ddc2531a4a 100644
--- a/drivers/iommu/intel/nested.c
+++ b/drivers/iommu/intel/nested.c
@@ -19,7 +19,7 @@
 struct nested_domain {
 	struct dmar_domain *s2_domain;
 	unsigned long s1_pgtbl;
-	struct iommu_stage1_config_vtd *s1_cfg;
+	struct iommu_stage1_config_vtd s1_cfg;
 
 	/* Protect the device list. */
 	struct mutex mutex;
@@ -39,10 +39,24 @@ static int intel_nested_attach_dev_pasid(struct iommu_domain *domain,
 	struct intel_iommu *iommu = info->iommu;
 	int ret = 0;
 
+	/*
+	 * Set up device context entry for PASID if not enabled already, one
+	 * strange thing, the intel_iommu_enable_pasid() is supposed to
+	 * be done when calling iommu_dev_enable_feature(, SVA). However,
+	 * without below intel_iommu_enable_pasid(), error is observed.
+	 * "SM: PASID Enable field in Context Entry is clear". @Baolu,
+	 * may you have a look.
+	 */
+	ret = intel_iommu_enable_pasid(iommu, dev);
+	if (ret) {
+		dev_err_ratelimited(dev, "Failed to enable PASID capability\n");
+		return ret;
+	}
+
 	spin_lock(&iommu->lock);
 	ret = intel_pasid_setup_nested(iommu, dev, pasid,
 				       (pgd_t *)(uintptr_t)ndomain->s1_pgtbl,
-				       dmar_domain, ndomain->s1_cfg);
+				       dmar_domain, &ndomain->s1_cfg);
 	spin_unlock(&iommu->lock);
 	if (ret)
 		return ret;
@@ -281,7 +295,7 @@ struct iommu_domain *intel_nested_domain_alloc(struct iommu_domain *s2_domain,
 
 	ndomain->s2_domain = to_dmar_domain(s2_domain);
 	ndomain->s1_pgtbl = s1_pgtbl;
-	ndomain->s1_cfg = &cfg->vtd;
+	ndomain->s1_cfg = cfg->vtd;
 	ndomain->domain.ops = &intel_nested_domain_ops;
 	mutex_init(&ndomain->mutex);
 	INIT_LIST_HEAD(&ndomain->devices);
diff --git a/drivers/iommu/intel/pasid.c b/drivers/iommu/intel/pasid.c
index 15a4cf72d3ac..1584a2f26262 100644
--- a/drivers/iommu/intel/pasid.c
+++ b/drivers/iommu/intel/pasid.c
@@ -785,7 +785,7 @@ int intel_pasid_setup_nested(struct intel_iommu *iommu, struct device *dev,
 	struct dma_pte *pgd;
 	u64 pgd_val;
 	int agaw;
-	u16 did;
+	u16 did, pgtt;
 
 	if (!ecap_nest(iommu->ecap)) {
 		pr_err_ratelimited("%s: No nested translation support\n",
@@ -799,9 +799,12 @@ int intel_pasid_setup_nested(struct intel_iommu *iommu, struct device *dev,
 
 	/*
 	 * Caller must ensure PASID entry is not in use, i.e. not bind the
-	 * same PASID to the same device twice.
+	 * same PASID to the same device twice. But special thing is
+	 * convert non-nested to nested. Such change is valid, so needs
+	 * to enhance the below check.
 	 */
-	if (pasid_pte_is_present(pte))
+	pgtt = pasid_pte_get_pgtt(pte);
+	if (pgtt == PASID_ENTRY_PGTT_NESTED && pasid_pte_is_present(pte))
 		return -EBUSY;
 	pasid_clear_entry(pte);
 
diff --git a/drivers/iommu/iommu.c b/drivers/iommu/iommu.c
index 4f93030b9828..8c67fd46bb09 100644
--- a/drivers/iommu/iommu.c
+++ b/drivers/iommu/iommu.c
@@ -2065,9 +2065,13 @@ static int __iommu_attach_group(struct iommu_domain *domain,
 {
 	int ret;
 
+	/*
+	 * Commment out for simple, in future, there should be an API
+	 * to perform group->domain replacement which doesn't have this
+	 * check.
 	if (group->domain && group->domain != group->default_domain)
 		return -EBUSY;
-
+	*/
 	ret = __iommu_group_for_each_dev(group, domain,
 					 iommu_group_do_attach_device);
 	if (ret == 0)
-- 
2.34.1

