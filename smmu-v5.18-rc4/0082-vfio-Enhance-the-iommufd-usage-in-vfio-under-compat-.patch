From 314c547ae3efc5ede7fb62db151746359c1c4940 Mon Sep 17 00:00:00 2001
From: Yi Liu <yi.l.liu@intel.com>
Date: Mon, 28 Feb 2022 23:00:04 -0800
Subject: [PATCH 082/141] vfio: Enhance the iommufd usage in vfio under compat
 mode

In the vfio iommufd compat mode, group->iommufd is a replacemet of
group->container. So any group fd code which uses the group->container
should be cared. This patch enhances the code and also adds some TODOs.

Signed-off-by: Yi Liu <yi.l.liu@intel.com>

32	5	drivers/vfio/vfio.c

diff --git a/drivers/vfio/vfio.c b/drivers/vfio/vfio.c
index ab1cc88b84e7..5a8ac01aee82 100644
--- a/drivers/vfio/vfio.c
+++ b/drivers/vfio/vfio.c
@@ -850,8 +850,12 @@ void vfio_unregister_group_dev(struct vfio_device *device)
 	 * Without this stall, we're potentially racing with a user process
 	 * that may attempt to immediately bind this device to another driver.
 	 */
-	if (list_empty(&group->device_list))
-		wait_event(group->container_q, !group->container);
+	if (list_empty(&group->device_list)) {
+		if (group->container)
+			wait_event(group->container_q, !group->container);
+		else
+			wait_event(group->container_q, !group->iommufd);
+	}
 
 	if (group->type == VFIO_NO_IOMMU || group->type == VFIO_EMULATED_IOMMU)
 		iommu_group_remove_device(device->dev);
@@ -1090,6 +1094,7 @@ static void __vfio_group_unset_container(struct vfio_group *group)
 	if (group->iommufd) {
 		vfio_group_unset_iommufd(group->iommufd, &group->device_list);
 		group->iommufd = NULL;
+		wake_up(&group->container_q);
 		return;
 	}
 
@@ -1258,7 +1263,8 @@ static int vfio_device_open_count(struct vfio_device *device)
 
 static bool vfio_device_in_container(struct vfio_device *device)
 {
-	return device->group && device->group->container;
+	return device->group &&
+		(device->group->container || device->group->iommufd);
 }
 
 static void vfio_device_close_decount(struct vfio_device *device)
@@ -1367,7 +1373,7 @@ static long vfio_group_fops_unl_ioctl(struct file *filep,
 
 		status.flags = 0;
 
-		if (group->container)
+		if (group->container || group->iommufd)
 			status.flags |= VFIO_GROUP_FLAGS_CONTAINER_SET |
 					VFIO_GROUP_FLAGS_VIABLE;
 		else if (!iommu_group_dma_owner_claimed(group->iommu_group))
@@ -1435,7 +1441,7 @@ static int vfio_group_fops_open(struct inode *inode, struct file *filep)
 	}
 
 	/* Is something still in use from a previous open? */
-	if (group->container) {
+	if (group->container || group->iommufd) {
 		atomic_dec(&group->opened);
 		vfio_group_put(group);
 		return -EBUSY;
@@ -2245,6 +2251,9 @@ int vfio_pin_pages(struct device *dev, unsigned long *user_pfn, int npage,
 	if (ret)
 		goto err_pin_pages;
 
+	/*
+	 * TODO: pin_pages should use the iommufd implementation
+	 */
 	container = group->container;
 	driver = container->iommu_driver;
 	if (likely(driver && driver->ops->pin_pages))
@@ -2292,6 +2301,9 @@ int vfio_unpin_pages(struct device *dev, unsigned long *user_pfn, int npage)
 	if (ret)
 		goto err_unpin_pages;
 
+	/*
+	 * TODO: unpin_pages should use the iommufd implementation
+	 */
 	container = group->container;
 	driver = container->iommu_driver;
 	if (likely(driver && driver->ops->unpin_pages))
@@ -2346,6 +2358,9 @@ int vfio_group_pin_pages(struct vfio_group *group,
 	if (npage > VFIO_PIN_PAGES_MAX_ENTRIES)
 		return -E2BIG;
 
+	/*
+	 * TODO: pin_pages should use the iommufd implementation
+	 */
 	container = group->container;
 	driver = container->iommu_driver;
 	if (likely(driver && driver->ops->pin_pages))
@@ -2438,6 +2453,9 @@ int vfio_dma_rw(struct vfio_group *group, dma_addr_t user_iova,
 	if (!group || !data || len <= 0)
 		return -EINVAL;
 
+	/*
+	 * TODO: dma_rw should use the iommufd implementation
+	 */
 	container = group->container;
 	driver = container->iommu_driver;
 
@@ -2463,6 +2481,9 @@ static int vfio_register_iommu_notifier(struct vfio_group *group,
 	if (ret)
 		return -EINVAL;
 
+	/*
+	 * TODO: register_notifier should use the iommufd implementation
+	 */
 	container = group->container;
 	driver = container->iommu_driver;
 	if (likely(driver && driver->ops->register_notifier))
@@ -2487,6 +2508,9 @@ static int vfio_unregister_iommu_notifier(struct vfio_group *group,
 	if (ret)
 		return -EINVAL;
 
+	/*
+	 * TODO: unregister_notifier should use the iommufd implementation
+	 */
 	container = group->container;
 	driver = container->iommu_driver;
 	if (likely(driver && driver->ops->unregister_notifier))
@@ -2626,6 +2650,9 @@ struct iommu_domain *vfio_group_iommu_domain(struct vfio_group *group)
 	if (!group)
 		return ERR_PTR(-EINVAL);
 
+	/*
+	 * TODO: group_iommu_domain should use the iommufd implementation
+	 */
 	container = group->container;
 	driver = container->iommu_driver;
 	if (likely(driver && driver->ops->group_iommu_domain))
-- 
2.34.1

