From 2f9a27a220a0902936f3c7329e3a0ce3006ecce1 Mon Sep 17 00:00:00 2001
From: Lu Baolu <baolu.lu@linux.intel.com>
Date: Tue, 3 May 2022 12:20:16 +0800
Subject: [PATCH 088/141] iommu/vt-d: Add attach/detach_dev_pasid for defaut
 domain ops

It allows the upper layer to attach a domain to a PASID of a device.
It could be supported only if the scalable mode is supported by the
hardware and enabled by the software. The typical use cases of these
callbacks are, for example, kernel DMA with PASID and subdevice (e.x.
vfio/mdev) drivers.

Signed-off-by: Lu Baolu <baolu.lu@linux.intel.com>

93	0	drivers/iommu/intel/iommu.c
10	0	include/linux/intel-iommu.h

diff --git a/drivers/iommu/intel/iommu.c b/drivers/iommu/intel/iommu.c
index a51b96fa9b3a..1636453207a1 100644
--- a/drivers/iommu/intel/iommu.c
+++ b/drivers/iommu/intel/iommu.c
@@ -1846,6 +1846,7 @@ static struct dmar_domain *alloc_domain(unsigned int type)
 		domain->flags |= DOMAIN_FLAG_USE_FIRST_LEVEL;
 	domain->has_iotlb_device = false;
 	INIT_LIST_HEAD(&domain->devices);
+	INIT_LIST_HEAD(&domain->subdevices);
 
 	return domain;
 }
@@ -4624,6 +4625,7 @@ static struct iommu_device *intel_iommu_probe_device(struct device *dev)
 
 	info->dev = dev;
 	info->iommu = iommu;
+	xa_init(&info->subdevice_array);
 	if (dev_is_pci(dev)) {
 		if (ecap_dev_iotlb_support(iommu->ecap) &&
 		    pci_ats_supported(pdev) &&
@@ -4912,6 +4914,95 @@ static void intel_iommu_iotlb_sync_map(struct iommu_domain *domain,
 	}
 }
 
+static int domain_attach_device_pasid(struct dmar_domain *domain,
+				      struct device *dev, ioasid_t pasid)
+{
+	struct device_domain_info *info = dev_iommu_priv_get(dev);
+	struct intel_iommu *iommu = info->iommu;
+	struct subdev_domain_info *sinfo;
+	unsigned long flags;
+	int ret;
+
+	if (sm_supported(iommu))
+		return -EOPNOTSUPP;
+
+	sinfo = kzalloc(sizeof(*sinfo), GFP_KERNEL);
+	if (!sinfo)
+		return -ENOMEM;
+
+	sinfo->domain = domain;
+	sinfo->pasid = pasid;
+	sinfo->pdev = dev;
+
+	spin_lock_irqsave(&device_domain_lock, flags);
+	ret = xa_err(xa_store(&info->subdevice_array, pasid,
+			      sinfo, GFP_ATOMIC));
+	if (ret)
+		goto out_unlock;
+
+	/*
+	 * iommu->lock must be held to attach domain to iommu and setup the
+	 * pasid entry for second level translation.
+	 */
+	ret = domain_attach_iommu(domain, iommu);
+	if (ret)
+		goto out_erase;
+
+	/* Setup the PASID entry for mediated devices: */
+	if (domain_use_first_level(domain))
+		ret = domain_setup_first_level(iommu, domain, dev, pasid);
+	else
+		ret = intel_pasid_setup_second_level(iommu, domain, dev, pasid);
+	if (ret)
+		goto out_detach_iommu;
+
+	list_add(&sinfo->link_domain, &domain->subdevices);
+	spin_unlock_irqrestore(&device_domain_lock, flags);
+
+	return 0;
+
+out_detach_iommu:
+	domain_detach_iommu(domain, iommu);
+out_erase:
+	xa_erase(&info->subdevice_array, pasid);
+out_unlock:
+	spin_unlock_irqrestore(&device_domain_lock, flags);
+
+	return ret;
+}
+
+static int intel_iommu_attach_device_pasid(struct iommu_domain *domain,
+					   struct device *dev, ioasid_t pasid)
+{
+	int ret;
+
+	ret = prepare_domain_attach_device(domain, dev);
+	if (ret)
+		return ret;
+
+	return domain_attach_device_pasid(to_dmar_domain(domain), dev, pasid);
+}
+
+static void intel_iommu_detach_device_pasid(struct iommu_domain *domain,
+					    struct device *dev, ioasid_t pasid)
+{
+	struct device_domain_info *info = dev_iommu_priv_get(dev);
+	struct dmar_domain *dmar_domain = to_dmar_domain(domain);
+	struct intel_iommu *iommu = info->iommu;
+	struct subdev_domain_info *sinfo;
+	unsigned long flags;
+
+	spin_lock_irqsave(&device_domain_lock, flags);
+	sinfo = xa_load(&info->subdevice_array, pasid);
+	intel_pasid_tear_down_entry(iommu, dev, pasid, false);
+	domain_detach_iommu(dmar_domain, iommu);
+	list_del(&sinfo->link_domain);
+	xa_erase(&info->subdevice_array, pasid);
+	spin_unlock_irqrestore(&device_domain_lock, flags);
+
+	kfree(sinfo);
+}
+
 const struct iommu_ops intel_iommu_ops = {
 	.capable		= intel_iommu_capable,
 	.domain_alloc		= intel_iommu_domain_alloc,
@@ -4932,6 +5023,8 @@ const struct iommu_ops intel_iommu_ops = {
 	.default_domain_ops = &(const struct iommu_domain_ops) {
 		.attach_dev		= intel_iommu_attach_device,
 		.detach_dev		= intel_iommu_detach_device,
+		.attach_dev_pasid	= intel_iommu_attach_device_pasid,
+		.detach_dev_pasid	= intel_iommu_detach_device_pasid,
 		.map_pages		= intel_iommu_map_pages,
 		.unmap_pages		= intel_iommu_unmap_pages,
 		.iotlb_sync_map		= intel_iommu_iotlb_sync_map,
diff --git a/include/linux/intel-iommu.h b/include/linux/intel-iommu.h
index 5af24befc9f1..128be09fa7b6 100644
--- a/include/linux/intel-iommu.h
+++ b/include/linux/intel-iommu.h
@@ -542,6 +542,7 @@ struct dmar_domain {
 	u8 force_snooping : 1;		/* Create IOPTEs with snoop control */
 
 	struct list_head devices;	/* all devices' list */
+	struct list_head subdevices;	/* all subdevices' list */
 	struct iova_domain iovad;	/* iova's that belong to this domain */
 
 	struct dma_pte	*pgd;		/* virtual address */
@@ -607,6 +608,14 @@ struct intel_iommu {
 	void *perf_statistic;
 };
 
+/* PCI domain-subdevice relationship */
+struct subdev_domain_info {
+	struct list_head link_domain;	/* link to domain siblings */
+	struct dmar_domain *domain;
+	struct device *pdev;		/* physical device derived from */
+	ioasid_t pasid;			/* PASID on physical device */
+};
+
 /* PCI domain-device relationship */
 struct device_domain_info {
 	struct list_head link;	/* link to domain siblings */
@@ -627,6 +636,7 @@ struct device_domain_info {
 	struct intel_iommu *iommu; /* IOMMU used by this device */
 	struct dmar_domain *domain; /* pointer to domain */
 	struct pasid_table *pasid_table; /* pasid table */
+	struct xarray subdevice_array;
 };
 
 static inline void __iommu_flush_cache(
-- 
2.34.1

